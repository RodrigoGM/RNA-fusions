#! /bin/csh -f
# set echo

##  qsub -q <queue> -w e -N <job_name> \
##    -l h_vmem=<memory, e.g. 4G> -l h_rt=<time> -l s_rt=<time> \
##    -pe smp <num_slots> -o <outputlogfile> -e <errorlogfile> <pathtoScript> <arg1> <arg2>

##$ -q jrf.q
#$ -w e -N MapSplice
#$ -l h_vmem=6G
#$ -pe smp 7  -j y
#$ -V -cwd
##$ -t 1-12

#<usage>
# as array :
# qsub ./discasm.qsh ../path/to/fastq/ ./path/to/output  
# for single run
# SGE_TASK_ID=1 NSLOTS=8 ./mapSplice.qsh ../path/to/fastq/ ./path/to/output
#</usage>
source /ifs/e63data/reis-filho/genomes/homo_sapiens/gVars.csh

set R1=(`ls $1*.1.fastq.gz`)
set R2=(`ls $1*.2.fastq.gz`)

## INDEX=$((SGE_TASK_ID-1))
## SGE_TASK_ID=${SGE_TASK_ID:-$3}
#if ( ! $?SGE_TASK_ID ) then
#setenv SGE_TASK_ID $3
#endif 

set STRAIN=`echo ${R1[$SGE_TASK_ID]} | awk '{n=split($0,arra,"/"); split(arra[n],brra,"."); print brra[1]}'`

set OUTDIR=$2/${STRAIN}

## verify or create $OUTDIR
if ( ! -d $OUTDIR  ) mkdir -p ${OUTDIR} ; endif

set UNCOMPRESSED_R1=`basename ${R1[$SGE_TASK_ID]} .gz`
set UNCOMPRESSED_R2=`basename ${R2[$SGE_TASK_ID]} .gz`

## for tcga normals
## gzip -cd ${R1[$SGE_TASK_ID]} | sed -e 's:/2$::' > $UNCOMPRESSED_R1
## gzip -cd ${R2[$SGE_TASK_ID]} | sed -e 's:/1$::' > $UNCOMPRESSED_R2

gzip -cd ${R1[$SGE_TASK_ID]}  > $UNCOMPRESSED_R1
gzip -cd ${R2[$SGE_TASK_ID]}  > $UNCOMPRESSED_R2


python /home/gularter/src/MapSplice-v2.2.1/mapsplice.py \
	-1 $UNCOMPRESSED_R1 \
	-2 $UNCOMPRESSED_R2 \
	-c ${HSA}/Sequence/Chromosomes/ \
	--gene-gtf $ENSEMBL66 \
	-x $BWT \
	-p $NSLOTS \
	--fusion \
	-o $OUTDIR/ 2> $OUTDIR/run_log.txt

## cleaning up
if ( $status == 0) then
    touch $OUTDIR/mapsplice.run.ok 
    rm $UNCOMPRESSED_R1 $UNCOMPRESSED_R2 
else
    echo "something went wrong"
    exit 1
endif

if ( $status == 0) then 
    awk '{OFS="\t"; print $1, $2, $3}' $OUTDIR/fusions_candidates.txt | tr "~" "\t" | awk '{OFS="\t"; print "chr"$1, $3, "chr"$2, $4, $5="AVG"}' > $OUTDIR/mapsplice.oncofuse.input.txt
    java -Xmx1G -jar /home/gularter/src/oncofuse-1.1.1/Oncofuse.jar -a hg19 $OUTDIR/mapsplice.oncofuse.input.txt "coord" - $OUTDIR/mapsplice.oncofuse.output.txt
    if ( $status == 0 ) touch $OUTDIR/mapsplice.oncofuse.ok
else
    echo "something went wrong with oncofuse"
    exit 2
endif

##awk '{OFS="\t"; 

## alignments.sam processing
samtools view -bS -@ $NSLOTS $OUTDIR/alignments.sam | samtools sort -f - $OUTDIR/alignments.bam 
if ( $status == 0)  rm $OUTDIR/alignments.sam ; endif

samtools index $OUTDIR/alignments.bam
